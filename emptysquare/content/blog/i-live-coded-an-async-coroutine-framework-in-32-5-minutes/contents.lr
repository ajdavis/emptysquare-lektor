_model: blog-post
---
title: I Live-Coded an Async Coroutine Framework in 32.5 Minutes
---
pub_date: 2015-08-18 12:00:20
---
author: 
---
type: post
---
tags:


---
categories: Programming,Python
---
summary: My PyGotham 2015 talk. Not just a magic trick: see how simply a coroutine framework can be implemented, and gain a deep understanding of this new idiom.
---
legacy_id: 55d3558d5393741c65d3f3da
---
body:

Python 3's "asyncio" module is an efficient async framework similar to Node. But unlike Node, it emphasizes a modern idiom called "coroutines", rather than callbacks. Coroutines promise the best of two worlds: the efficiency of callbacks, but with a natural and robust coding style similar to synchronous programming.

In barely 30 minutes I live-coded a Python 3 async framework at PyGotham 2015. First, I showed how an async framework uses non-blocking sockets, callbacks, and an event loop. This version of the framework is very efficient, but callbacks make a mess of the code. Therefore, I implemented coroutines using Python generators and two classes called Future and Task, and updated my little framework to use coroutines instead of callbacks.

<iframe width="640" height="360" src="https://www.youtube.com/embed/idLtMISlgy8?start=0" frameborder="0" allowfullscreen></iframe>

The live-coding demo isn't just a magic trick: watch to see how simply a coroutine-based async framework can be implemented, and gain a deep understanding of this miraculous new programming idiom in the Python 3 standard library.

***

My mind is blown by the speed and quality of [Next Day Video](https://twitter.com/nextdayvideo)'s work at Python conferences. My undying gratitude for this recording of my PyGotham talk.
