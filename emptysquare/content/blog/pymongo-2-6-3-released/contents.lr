_model: blog-post
---
title: PyMongo 2.6.3 Released
---
pub_date: 2013-10-11 14:30:32
---
author: 
---
type: post
---
tags:


---
categories: Mongo,Programming,Python
---
summary: Announcing PyMongo 2.6.3, which fixes some connection-pool bugs and hardens the BSON parser.
---
legacy_id: 525842d65393740368ee2727
---
body:

[<img style="display:block; margin-left:auto; margin-right:auto;" src="grail-tree.jpg" alt="Grail tree" title="Grail tree" />](http://www.flickr.com/photos/emptysquare/4527549354/)

Bernie Hackett and I released [PyMongo 2.6.3](https://pypi.python.org/pypi/pymongo/2.6.3) this afternoon. It fixes some bugs introduced in 2.6.0 when we added major features to PyMongo's connection pool.

The headline fix is for a [semaphore leak during connection failure](https://jira.mongodb.org/browse/PYTHON-580): The connection pool decrements a semaphore when it creates a connection, but didn't *increment* the semaphore if the connection failed. If a long-lived Python process connected to MongoDB over a flaky network with frequent connection timeouts, the semaphore's value would reach zero and further connection attempts would hang. I fixed it with a big try/finally block that ensures we increment the semaphore if we can't connect.

I also fixed a sheer oversight of mine: Although you can fine-tune the pool by passing the [waitQueueMultiple and waitQueueTimeoutMS](http://api.mongodb.org/python/current/faq.html#how-does-connection-pooling-work-in-pymongo) parameters to MongoClient, you couldn't do the same for MongoReplicaSetClient, because it [ignored those parameters](https://jira.mongodb.org/browse/PYTHON-579).

Meanwhile, Bernie tightened up our BSON parser. It now [raises errors instead of crashing](https://jira.mongodb.org/browse/PYTHON-571) when parsing a wider range of bad inputs. This continues our effort over the last few releases to harden the parser against corrupt documents, [bizarre Python interpreter states](/blog/python-c-extensions-and-mod-wsgi/), out-of-memory errors, and the like.
